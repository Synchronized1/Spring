<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<description>数据源及事务配置</description>
	
	<!-- application 上下文 -->
    <bean class="com.somnus.ApplicationContextHolder"/>

	<context:property-placeholder
		ignore-unresolvable="true" location="classpath:/env/configurations-dev.properties" />
	<!-- <context:property-placeholder 
		ignore-unresolvable="true" 
		location="classpath:/env/configurations-dev.properties,classpath:/env/configurations-dev.properties" /> -->
	
	<!-- 数据源配置-DBCP数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="defaultAutoCommit" value="false" />
		<!-- 解密密码必须要配置的项 -->
		<property name="filters" value="config" />
		<property name="connectionProperties"
			value="config.decrypt=true;config.decrypt.key=${jdbc.publickey}" />
	</bean>

	<!-- 数据源配置 -->
	<!-- 代理datasource，使其能够显式获取preparedStatement的参数值 -->
	<bean id="proxyDataSource" class="org.jdbcdslog.ConnectionPoolDataSourceProxy">
		<property name="targetDSDirect" ref="dataSource" />
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="proxyDataSource" />
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="proxyDataSource" />
	</bean>

	<!--#####################################################################################
	######                    第一种配置声明式事务的方法                                                                                                              ###### 
	##########################################################################################-->
	<!-- 配置事务的传播特性 1-propagation 2-read-only 3-isoloation 4-timeout 5-rollbackFor 6-rollbackForClassname 7-NorollbackFor 8-NorollbackForClassname-->
	<!--  
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	-->
	<!-- 配置哪些方法参与事务 
	<aop:config>
		<aop:pointcut id="allMethod" expression="execution(* service.*.*(..))"/>
		<aop:advisor pointcut-ref="allMethod" advice-ref="txAdvice"/>
	</aop:config> -->
	<!--#####################################################################################
	######                    第二种配置声明式事务的方法                                                                                                            ###### 
	#########################################################################################-->
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<!--  事务拦截器bean需要依赖注入一个事务管理器 -->
		<property name="transactionManager">
			<ref bean="transactionManager" />
		</property>
		<property name="transactionAttributes">
			<!--  下面定义事务传播属性-->
			<props>
				<prop key="*">readOnly</prop>
				<prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="modify*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="delete*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="remove*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="query*">PROPAGATION_REQUIRED, readOnly,-Exception</prop>
				<prop key="load*">PROPAGATION_REQUIRED, -Exception</prop>
			</props>
		</property>
	</bean>

	<!-- 自动代理 -->
	<bean id="autoproxy"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<!-- 可以是Service或DAO层（最好是针对业务层*Service） -->
		<property name="beanNames">
			<list>
				<value>*Service</value><!--下面是所有需要自动创建事务代理的bean 所有以service结尾的都会创建事务代理-->
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>
	
	<bean id="userService" class="com.somnus.spring.xml.transaction.UserService">
		<property name="jdbcTemplate" ref="jdbcTemplate"></property>
	</bean>

</beans>
